#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#

    # Target:
    # Build a clean version of Zeppelin, using minimal changes.

    # Checkout a clean copy of the source code, master branch

    # Apply minimal changes to fix the container image names.

        # This file is used inside the container.
        # .. but the values can be overriden at deployment ?
        conf/zeppelin-site.xml.template

            <property>
              <name>zeppelin.k8s.container.image</name>
              <value>aglais/zeppelin:latest</value>
              <description>Docker image for interpreters</description>
            </property>
            <property>
              <name>zeppelin.k8s.spark.container.image</name>
              <value>aglais/spark:latest</value>
              <description>Docker image for Spark executors</description>
            </property>

            <property>
              <name>zeppelin.docker.container.image</name>
              <value>aglais/zeppelin:latest</value>
              <description>Docker image for interpreters</description>
            </property>

        # This is used during deployment to override the values in zeppelin-site.xml.
        k8s/zeppelin-server.yaml

            ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE: aglais/pyspark-mod:latest
            ZEPPELIN_K8S_CONTAINER_IMAGE: aglais/zeppelin:latest

            - name: zeppelin-server
              image: aglais/zeppelin:latest

    # ... but, IF zeppelin-server.yaml overrides zeppelin-site.xml,
    # then we don't need to modify the files in the container image ?


# -----------------------------------------------------
# Login to one of the trop machines.
#[user@desktop]

    ssh trop04

# -----------------------------------------------------
# Create a virtual machine to work with.
#[user@desktop]

    createvm

--START--
....
....
--END--


# -----------------------------------------------------
# Login to the virtual machine.
#[user@desktop]

    ssh Stevedore@wumar

# -----------------------------------------------------
# Install the bzip2 package.
#[root@builder]

    dnf install -y bzip2


# -----------------------------------------------------
# Install Docker CE.
# Encountered problems automating this as part of the VM image build.
# https://computingforgeeks.com/how-to-install-docker-on-fedora/
#[user@wumar]

    sudo dnf install \
        -y \
        dnf-plugins-core

    sudo dnf config-manager \
        --add-repo \
        https://download.docker.com/linux/fedora/docker-ce.repo

    sudo dnf install \
        -y \
        docker-ce \
        docker-ce-cli \
        containerd.io


# -----------------------------------------------------
# Start the Docker daemon.
#[user@wumar]

    sudo systemctl enable docker.service

    >   Created symlink /etc/systemd/system/multi-user.target.wants/docker.service â†’ /usr/lib/systemd/system/docker.service.


    sudo systemctl start docker.service

    sudo systemctl status docker.service

--START--
....
....
--END--


# -----------------------------------------------------
# Fix for Docker cgroups.
# https://github.com/docker/for-linux/issues/219#issuecomment-647023454
# https://forum.linuxconfig.org/t/how-to-install-docker-on-fedora-31-linuxconfig-org/3605/3
#[user@wumar]

    sudo dnf install -y grubby

    sudo grubby --update-kernel=ALL --args="systemd.unified_cgroup_hierarchy=0"

    sudo reboot


# -----------------------------------------------------
# Create our target directories.
#[user@wumar]

    sudo mkdir /var/local/build
    sudo mkdir /var/local/cache

    sudo chmod a+rwx /var/local/build
    sudo chmod a+rwx /var/local/cache


# -----------------------------------------------------
# Run a Java build container.
#[user@wumar]

    chcon -t svirt_sandbox_file_t "${SSH_AUTH_SOCK:?}"

    docker run \
        --rm \
        --tty \
        --interactive \
        --hostname builder \
        --env "SSH_AUTH_SOCK=/tmp/ssh_auth_sock" \
        --volume '/etc/localtime:/etc/localtime:ro' \
        --volume "${SSH_AUTH_SOCK}:/tmp/ssh_auth_sock" \
        --volume '/var/run/docker.sock:/var/run/docker.sock' \
        --volume '/var/local/cache:/var/local/cache:rw' \
        --volume '/var/local/build:/var/local/build:rw' \
        "firethorn/builder:latest" \
        bash


# -----------------------------------------------------
# Create our secret function.
#[root@builder]

    mkdir ${HOME}/bin
    cat > ${HOME}/bin/secret << 'EOF'
ssh -n \
    'Zarquan@data.metagrid.co.uk' \
    "bin/secret '${1}'"
EOF

    chmod a+x ${HOME}/bin/secret
    export PATH=${PATH}:${HOME}/bin

    secret frog


# -----------------------------------------------------
# Configure the source code paths.
#[root@builder]

    cat > /etc/aglais.env << 'EOF'
AGLAIS_REPO='https://github.com/Zarquan/aglais.git'
AGLAIS_HOME='/var/local/build/aglais'
AGLAIS_CODE="${AGLAIS_HOME:?}/github-zrq"
AGLAIS_CLOUD=gaia-prod
AGLAIS_USER=albert

ZEPPELIN_REPO='https://github.com/Zarquan/aglais-zeppelin.git'
ZEPPELIN_HOME='/var/local/build/aglais-zeppelin'
ZEPPELIN_CODE="${ZEPPELIN_HOME:?}/github-zrq"
EOF


# -----------------------------------------------------
# Clone our project source.
#[root@builder]

    source "/etc/aglais.env"

    echo "Checking [${AGLAIS_HOME:?}]"
    if [ ! -e "${AGLAIS_HOME:?}" ]
    then
        echo "Creating [${AGLAIS_HOME:?}]"
        mkdir --parents "${AGLAIS_HOME:?}"
    fi

    echo "Checking [$(dirname ${AGLAIS_CODE:?})]"
    if [ ! -e "$(dirname ${AGLAIS_CODE:?})" ]
    then
        echo "Creating [$(dirname ${AGLAIS_CODE:?})]"
        mkdir --parents "$(dirname ${AGLAIS_CODE:?})"
    fi

    echo "Checking [${AGLAIS_CODE:?}]"
    if [ ! -e "${AGLAIS_CODE:?}" ]
    then
        echo "Creating [${AGLAIS_CODE:?}]"
        pushd "$(dirname ${AGLAIS_CODE:?})"
            git clone "${AGLAIS_REPO:?}" "$(basename ${AGLAIS_CODE:?})"
        popd
    else
        echo "Updating [${AGLAIS_CODE:?}]"
        pushd "${AGLAIS_CODE:?}"
            git pull
        popd
    fi


# -----------------------------------------------------
# Checkout our working branch.
#[root@builder]

    devbranch=20200718-zrq-kubernetes

    source "${HOME}/aglais.env"
    pushd "${AGLAIS_CODE:?}"
        git checkout "${devbranch:?}"
    popd


# -----------------------------------------------------
# Clone our fork of Zeppelin.
#[root@builder]

    source "/etc/aglais.env"

    echo "Checking [${ZEPPELIN_HOME:?}]"
    if [ ! -e "${ZEPPELIN_HOME:?}" ]
    then
        echo "Creating [${ZEPPELIN_HOME:?}]"
        mkdir --parents "${ZEPPELIN_HOME:?}"
    fi

    echo "Checking [$(dirname ${ZEPPELIN_CODE:?})]"
    if [ ! -e "$(dirname ${ZEPPELIN_CODE:?})" ]
    then
        echo "Creating [$(dirname ${ZEPPELIN_CODE:?})]"
        mkdir --parents "$(dirname ${ZEPPELIN_CODE:?})"
    fi

    echo "Checking [${ZEPPELIN_CODE:?}]"
    if [ ! -e "${ZEPPELIN_CODE:?}" ]
    then
        echo "Creating [${ZEPPELIN_CODE:?}]"
        pushd "$(dirname ${ZEPPELIN_CODE:?})"
            git clone "${ZEPPELIN_REPO:?}" "$(basename ${ZEPPELIN_CODE:?})"
        popd
    else
        echo "Updating [${ZEPPELIN_CODE:?}]"
        pushd "${ZEPPELIN_CODE:?}"
            git pull
        popd
    fi


--START--
....
....
--END--


# -----------------------------------------------------
# Allow write access to the build directories.
#[root@builder]

    chmod -R a+rw "/var/local/build"
    chmod -R a+rw "/var/local/cache"

# -----------------------------------------------------
# Run the build as non-root user.
# (one of the tools in the Zeppelin build won't run as root)
#[root@builder]

    adduser fred
    su fred


# -----------------------------------------------------
# Build the distribution package.
# https://zeppelin.apache.org/docs/latest/setup/basics/how_to_build.html#package
#[fred@builder]

    source "/etc/aglais.env"
    pushd "${ZEPPELIN_CODE:?}"

        mvn package build-distr -P spark-3.0 -P spark-scala-2.12

    popd

--START--
....
....
--END--


# -----------------------------------------------------
# Drop back to root user.
#[root@builder]

    exit


# -----------------------------------------------------
# Build our Docker image.
#[root@builder]

    buildtag=$(date '+%Y.%m.%d')
    buildtime=$(date '+%Y-%m-%dT%H:%M:%S')

    source "/etc/aglais.env"

    cp "${AGLAIS_CODE}/experiments/zrq/zeppelin/docker/log4j.properties" \
       "${ZEPPELIN_RESULT:?}"

    docker build \
        --tag aglais/zeppelin:latest \
        --tag aglais/zeppelin:${buildtag:?} \
        --build-arg "buildtag=${buildtag:?}" \
        --build-arg "buildtime=${buildtime:?}" \
        --file "${AGLAIS_CODE:?}/experiments/zrq/zeppelin/docker/Dockerfile" \
        "${ZEPPELIN_RESULT:?}"

--START--
....
....
--END--


# -----------------------------------------------------
# Login to the Docker registry.
#[root@builder]

    docker login \
        --username $(secret docker.io.user) \
        --password $(secret docker.io.pass)

    >   ....
    >   Login Succeeded


# -----------------------------------------------------
# Push our new image to Docker hub.
#[root@builder]

    docker push "aglais/zeppelin:${buildtag:?}"

--START--
....
....
--END--


    docker push "aglais/zeppelin:latest"

--START--
....
....
--END--


    #
    # Subsequent changes should use this as a base and add individual files.
    # buildtag=2020.07.22




