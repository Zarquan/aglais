#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#

    # Follow on from 20200629-04-cephfs-router
    # Based on example from StackHPC
    # https://github.com/RSE-Cambridge/iris-magnum/tree/master/manila-cephfs-pvc

    # StackHPC example is based on manila-provisioner example.
    # https://github.com/kubernetes/cloud-provider-openstack/tree/master/examples/manila-provisioner/cephfs
    # ... which is no longer available.

    # ... replaced by manila-csi-plugin
    # https://github.com/kubernetes/cloud-provider-openstack/tree/master/examples/manila-csi-plugin



# -----------------------------------------------------
# Create a container to work with.
#[user@desktop]

    source "${HOME}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --name terraformer \
        --hostname terraformer \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/terraform:/terraform:z" \
        atolmis/terraform-client \
        bash


# -----------------------------------------------------
# Set the cloud, credentials and cluster names.
#[user@terraformer]

    cloudname=gaia-prod
    clustername=Tiberius
    keypairname=zrq-gaia-keypair


# -----------------------------------------------------
# Set the Manila API version.
# https://stackoverflow.com/a/58806536
#[user@terraformer]

    export OS_SHARE_API_VERSION=2.51


# -----------------------------------------------------
# Get the cluster config for kubectl.
#[user@terraformer]

    mkdir -p "${HOME}/.kube/${clustername:?}"
    openstack \
        --os-cloud "${cloudname:?}-super" \
        coe cluster config \
            "${clustername:?}" \
            --force \
            --dir "${HOME}/.kube/${clustername:?}"


# -----------------------------------------------------
# Check kubectl can access our cluster.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        cluster-info

--START--
Kubernetes master is running at https://128.232.227.203:6443
Heapster is running at https://128.232.227.203:6443/api/v1/namespaces/kube-system/services/heapster/proxy
CoreDNS is running at https://128.232.227.203:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
--END--


# -----------------------------------------------------
# Create the ServiceAccount, ClusterRole and ClusterRoleBinding.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename /terraform/modules/manila/cephfs-pvc/manila-account.yaml


--START--
serviceaccount/manila-provisioner-account created
clusterrole.rbac.authorization.k8s.io/manila-provisioner-role created
clusterrolebinding.rbac.authorization.k8s.io/manila-provisioner-role-binding created
--END--


# -----------------------------------------------------
# Create the manila-provisioner Deployment.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename /terraform/modules/manila/cephfs-pvc/manila-deployment.yaml

--START--
deployment.apps/manila-provisioner-deployment created
--END--


# -----------------------------------------------------
# Create the manila-cephfs-share StorageClass.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename /terraform/modules/manila/cephfs-pvc/manila-storage-class.yaml

--START--
storageclass.storage.k8s.io/manila-cephfs-storage created
--END--


# -----------------------------------------------------
# Create a PersistentVolumeClaim.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename /terraform/modules/manila/cephfs-pvc/manila-volume-claim-001.yaml


--START--
persistentvolumeclaim/manila-volume-claim-001 created
--END--


# -----------------------------------------------------
# Check our resources ..
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get ServiceAccount

--START--
NAME                         SECRETS   AGE
default                      1         38h
manila-provisioner-account   1         95s
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get ClusterRole

--START--
NAME                                                                   AGE
....
....
magnum:podsecuritypolicy:privileged                                    38h
manila-provisioner-role                                                112s
....
....
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get ClusterRoleBinding

--START--
NAME                                                   AGE
....
....
magnum-auto-healer                                     38h
manila-provisioner-role-binding                        2m38s
....
....
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get Deployment

--START--
NAME                            READY   UP-TO-DATE   AVAILABLE   AGE
manila-provisioner-deployment   1/1     1            1           3m4s
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get StorageClass

--START--
NAME                    PROVISIONER          AGE
manila-cephfs-storage   manila-provisioner   2m42s
--END--

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get PersistentVolumeClaim

--START--
NAME                      STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS            AGE
manila-volume-claim-001   Bound    pvc-be8964e1-4308-41ed-a67e-9775cd96a6cd   108G       RWX            manila-cephfs-storage   2m34s
--END--


# -----------------------------------------------------
# Check our resources ..
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get ServiceAccount \
            manila-provisioner-account \
            --output json

--START--
{
    "apiVersion": "v1",
    "kind": "ServiceAccount",
    "metadata": {
        "creationTimestamp": "2020-07-01T14:33:34Z",
        "name": "manila-provisioner-account",
        "namespace": "default",
        "resourceVersion": "425780",
        "selfLink": "/api/v1/namespaces/default/serviceaccounts/manila-provisioner-account",
        "uid": "2db01ea8-e8da-4112-8aeb-0eb4e9d779b5"
    },
    "secrets": [
        {
            "name": "manila-provisioner-account-token-hv6cp"
        }
    ]
}
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get ClusterRole \
            manila-provisioner-role \
            --output json

--START--
{
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRole",
    "metadata": {
        "creationTimestamp": "2020-07-01T14:33:34Z",
        "name": "manila-provisioner-role",
        "resourceVersion": "425781",
        "selfLink": "/apis/rbac.authorization.k8s.io/v1/clusterroles/manila-provisioner-role",
        "uid": "e1292965-fc95-48b1-8a7a-b4ac9de06063"
    },
    "rules": [
        {
            "apiGroups": [
                ""
            ],
            "resources": [
                "secrets"
            ],
            "verbs": [
                "create",
                "get",
                "delete"
            ]
        },
        {
            "apiGroups": [
                ""
            ],
            "resources": [
                "endpoints"
            ],
            "verbs": [
                "get",
                "create",
                "update",
                "delete"
            ]
        },
        {
            "apiGroups": [
                ""
            ],
            "resources": [
                "persistentvolumes"
            ],
            "verbs": [
                "get",
                "list",
                "watch",
                "create",
                "delete"
            ]
        },
        {
            "apiGroups": [
                ""
            ],
            "resources": [
                "persistentvolumeclaims"
            ],
            "verbs": [
                "get",
                "list",
                "watch",
                "update"
            ]
        },
        {
            "apiGroups": [
                "storage.k8s.io"
            ],
            "resources": [
                "storageclasses"
            ],
            "verbs": [
                "get",
                "list",
                "watch"
            ]
        },
        {
            "apiGroups": [
                ""
            ],
            "resources": [
                "events"
            ],
            "verbs": [
                "list",
                "watch",
                "create",
                "update",
                "patch"
            ]
        }
    ]
}
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get ClusterRoleBinding \
            manila-provisioner-role-binding \
            --output json

--START--
{
    "apiVersion": "rbac.authorization.k8s.io/v1",
    "kind": "ClusterRoleBinding",
    "metadata": {
        "creationTimestamp": "2020-07-01T14:33:34Z",
        "name": "manila-provisioner-role-binding",
        "resourceVersion": "425782",
        "selfLink": "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/manila-provisioner-role-binding",
        "uid": "9e3696c6-a996-4e64-ac83-0d72293ebce6"
    },
    "roleRef": {
        "apiGroup": "rbac.authorization.k8s.io",
        "kind": "ClusterRole",
        "name": "manila-provisioner-role"
    },
    "subjects": [
        {
            "kind": "ServiceAccount",
            "name": "manila-provisioner-account",
            "namespace": "default"
        }
    ]
}
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get Deployment \
            manila-provisioner-deployment \
            --output json

--START--
{
    "apiVersion": "extensions/v1beta1",
    "kind": "Deployment",
    "metadata": {
        "annotations": {
            "deployment.kubernetes.io/revision": "1"
        },
        "creationTimestamp": "2020-07-01T14:33:40Z",
        "generation": 1,
        "labels": {
            "app": "manila-provisioner-app"
        },
        "name": "manila-provisioner-deployment",
        "namespace": "default",
        "resourceVersion": "425823",
        "selfLink": "/apis/extensions/v1beta1/namespaces/default/deployments/manila-provisioner-deployment",
        "uid": "af712cbc-2cbc-49c8-b055-4b396311dddd"
    },
    "spec": {
        "progressDeadlineSeconds": 600,
        "replicas": 1,
        "revisionHistoryLimit": 10,
        "selector": {
            "matchLabels": {
                "app": "manila-provisioner-app"
            }
        },
        "strategy": {
            "rollingUpdate": {
                "maxSurge": "25%",
                "maxUnavailable": "25%"
            },
            "type": "RollingUpdate"
        },
        "template": {
            "metadata": {
                "creationTimestamp": null,
                "labels": {
                    "app": "manila-provisioner-app"
                }
            },
            "spec": {
                "containers": [
                    {
                        "args": [
                            "--provisioner=manila-provisioner"
                        ],
                        "image": "docker.io/k8scloudprovider/manila-provisioner:latest",
                        "imagePullPolicy": "IfNotPresent",
                        "name": "manila-provisioner",
                        "resources": {},
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File"
                    }
                ],
                "dnsPolicy": "ClusterFirst",
                "restartPolicy": "Always",
                "schedulerName": "default-scheduler",
                "securityContext": {},
                "serviceAccount": "manila-provisioner-account",
                "serviceAccountName": "manila-provisioner-account",
                "terminationGracePeriodSeconds": 30
            }
        }
    },
    "status": {
        "availableReplicas": 1,
        "conditions": [
            {
                "lastTransitionTime": "2020-07-01T14:33:43Z",
                "lastUpdateTime": "2020-07-01T14:33:43Z",
                "message": "Deployment has minimum availability.",
                "reason": "MinimumReplicasAvailable",
                "status": "True",
                "type": "Available"
            },
            {
                "lastTransitionTime": "2020-07-01T14:33:40Z",
                "lastUpdateTime": "2020-07-01T14:33:43Z",
                "message": "ReplicaSet \"manila-provisioner-deployment-7775bd5d9d\" has successfully progressed.",
                "reason": "NewReplicaSetAvailable",
                "status": "True",
                "type": "Progressing"
            }
        ],
        "observedGeneration": 1,
        "readyReplicas": 1,
        "replicas": 1,
        "updatedReplicas": 1
    }
}
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get StorageClass \
            manila-cephfs-storage \
            --output json

--START--
{
    "apiVersion": "storage.k8s.io/v1",
    "kind": "StorageClass",
    "metadata": {
        "creationTimestamp": "2020-07-01T14:34:12Z",
        "name": "manila-cephfs-storage",
        "resourceVersion": "425910",
        "selfLink": "/apis/storage.k8s.io/v1/storageclasses/manila-cephfs-storage",
        "uid": "d0e66560-8866-4b9f-9217-9554e6c4b2cb"
    },
    "parameters": {
        "backend": "cephfs",
        "osSecretName": "os-trustee",
        "osSecretNamespace": "kube-system",
        "protocol": "CEPHFS",
        "type": "cephfsnativetype",
        "zones": "nova"
    },
    "provisioner": "manila-provisioner",
    "reclaimPolicy": "Delete",
    "volumeBindingMode": "Immediate"
}
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get PersistentVolumeClaim \
            manila-volume-claim-001 \
            --output json

--START--
{
    "apiVersion": "v1",
    "kind": "PersistentVolumeClaim",
    "metadata": {
        "annotations": {
            "pv.kubernetes.io/bind-completed": "yes",
            "pv.kubernetes.io/bound-by-controller": "yes",
            "volume.beta.kubernetes.io/storage-provisioner": "manila-provisioner"
        },
        "creationTimestamp": "2020-07-01T14:34:49Z",
        "finalizers": [
            "kubernetes.io/pvc-protection"
        ],
        "name": "manila-volume-claim-001",
        "namespace": "default",
        "resourceVersion": "426059",
        "selfLink": "/api/v1/namespaces/default/persistentvolumeclaims/manila-volume-claim-001",
        "uid": "be8964e1-4308-41ed-a67e-9775cd96a6cd"
    },
    "spec": {
        "accessModes": [
            "ReadWriteMany"
        ],
        "resources": {
            "requests": {
                "storage": "100Gi"
            }
        },
        "storageClassName": "manila-cephfs-storage",
        "volumeMode": "Filesystem",
        "volumeName": "pvc-be8964e1-4308-41ed-a67e-9775cd96a6cd"
    },
    "status": {
        "accessModes": [
            "ReadWriteMany"
        ],
        "capacity": {
            "storage": "108G"
        },
        "phase": "Bound"
    }
}
--END--


# -----------------------------------------------------
# Deploy our local data test.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename /terraform/modules/manila/cephfs-pvc/local-data-test.yaml

--START--
service/local-data-svc created
error: error parsing /terraform/modules/manila/cephfs-pvc/local-data-test.yaml: error converting YAML to JSON: yaml: line 29: block sequence entries are not allowed in this context
--END--

#
# Tools to fix YAML
# https://yaml-multiline.info/
# http://www.yamllint.com/
#

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        delete Service \
            local-data-svc

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        delete Pod \
            local-data-pod

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        create \
            --filename /terraform/modules/manila/cephfs-pvc/local-data-test.yaml

--START--
service/local-data-svc created
pod/local-data-pod created
--END--


# -----------------------------------------------------
# Get the Pod and Service details.
#[user@terraformer]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get Pod \
            local-data-pod \
            --output json

--START--
{
    "apiVersion": "v1",
    "kind": "Pod",
    "metadata": {
        "creationTimestamp": "2020-07-01T15:19:55Z",
        "labels": {
            "app": "local-data-app"
        },
        "name": "local-data-pod",
        "namespace": "default",
        "resourceVersion": "434643",
        "selfLink": "/api/v1/namespaces/default/pods/local-data-pod",
        "uid": "059bdc10-befa-40db-985e-09344f3f1ebf"
    },
    "spec": {
        "containers": [
            {
                "image": "nginx",
                "imagePullPolicy": "Always",
                "name": "webserver",
                "resources": {},
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "volumeMounts": [
                    {
                        "mountPath": "/usr/share/nginx/html",
                        "name": "local-data-vol"
                    },
                    {
                        "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                        "name": "default-token-cnrz8",
                        "readOnly": true
                    }
                ]
            },
            {
                "args": [
                    "-c",
                    "while true; do date \u003e\u003e /data/date.txt; sleep 1; done"
                ],
                "command": [
                    "/bin/sh"
                ],
                "image": "debian",
                "imagePullPolicy": "Always",
                "name": "logger",
                "resources": {},
                "terminationMessagePath": "/dev/termination-log",
                "terminationMessagePolicy": "File",
                "volumeMounts": [
                    {
                        "mountPath": "/data",
                        "name": "local-data-vol"
                    },
                    {
                        "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                        "name": "default-token-cnrz8",
                        "readOnly": true
                    }
                ]
            }
        ],
        "dnsPolicy": "ClusterFirst",
        "enableServiceLinks": true,
        "nodeName": "tiberius-alfjmzar3cyv-node-0",
        "restartPolicy": "Always",
        "schedulerName": "default-scheduler",
        "securityContext": {},
        "serviceAccount": "default",
        "serviceAccountName": "default",
        "terminationGracePeriodSeconds": 30,
        "tolerations": [
            {
                "effect": "NoExecute",
                "key": "node.kubernetes.io/not-ready",
                "operator": "Exists",
                "tolerationSeconds": 300
            },
            {
                "effect": "NoExecute",
                "key": "node.kubernetes.io/unreachable",
                "operator": "Exists",
                "tolerationSeconds": 300
            }
        ],
        "volumes": [
            {
                "emptyDir": {},
                "name": "local-data-vol"
            },
            {
                "name": "default-token-cnrz8",
                "secret": {
                    "defaultMode": 420,
                    "secretName": "default-token-cnrz8"
                }
            }
        ]
    },
    "status": {
        "conditions": [
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2020-07-01T15:19:55Z",
                "status": "True",
                "type": "Initialized"
            },
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2020-07-01T15:20:12Z",
                "status": "True",
                "type": "Ready"
            },
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2020-07-01T15:20:12Z",
                "status": "True",
                "type": "ContainersReady"
            },
            {
                "lastProbeTime": null,
                "lastTransitionTime": "2020-07-01T15:19:55Z",
                "status": "True",
                "type": "PodScheduled"
            }
        ],
        "containerStatuses": [
            {
                "containerID": "docker://9fe278c62ce7ff698a6da60e1eb05e38b525ab22815c314064ae8fa8eae04170",
                "image": "docker.io/debian:latest",
                "imageID": "docker-pullable://docker.io/debian@sha256:46d659005ca1151087efa997f1039ae45a7bf7a2cbbe2d17d3dcbda632a3ee9a",
                "lastState": {},
                "name": "logger",
                "ready": true,
                "restartCount": 0,
                "state": {
                    "running": {
                        "startedAt": "2020-07-01T15:20:11Z"
                    }
                }
            },
            {
                "containerID": "docker://c5fdfa55fe93be59f5ea45bac8b4e72f68b19bde30b196375fbefc9da0279c19",
                "image": "docker.io/nginx:latest",
                "imageID": "docker-pullable://docker.io/nginx@sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133",
                "lastState": {},
                "name": "webserver",
                "ready": true,
                "restartCount": 0,
                "state": {
                    "running": {
                        "startedAt": "2020-07-01T15:20:04Z"
                    }
                }
            }
        ],
        "hostIP": "10.0.0.78",
        "phase": "Running",
        "podIP": "10.100.1.35",
        "qosClass": "BestEffort",
        "startTime": "2020-07-01T15:19:55Z"
    }
}
--END--


    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        get Service \
            local-data-svc \
            --output json

--START--
{
    "apiVersion": "v1",
    "kind": "Service",
    "metadata": {
        "creationTimestamp": "2020-07-01T15:19:55Z",
        "labels": {
            "app": "local-data-app"
        },
        "name": "local-data-svc",
        "namespace": "default",
        "resourceVersion": "434580",
        "selfLink": "/api/v1/namespaces/default/services/local-data-svc",
        "uid": "6d29b12d-4d17-4b72-b408-17b2bbf48fe0"
    },
    "spec": {
        "clusterIP": "10.254.209.41",
        "ports": [
            {
                "port": 8000,
                "protocol": "TCP",
                "targetPort": 80
            }
        ],
        "selector": {
            "app": "local-data-app"
        },
        "sessionAffinity": "None",
        "type": "ClusterIP"
    },
    "status": {
        "loadBalancer": {}
    }
}
--END--




# -----------------------------------------------------
# -----------------------------------------------------
# Setup a port forwarding proxy.
#[user@desktop]

    source "${HOME}/aglais.env"

    podman run \
        --rm \
        --tty \
        --interactive \
        --publish 8000-8007 \
        --name kubectl-proxy \
        --hostname kubectl-proxy \
        --volume "${HOME}/clouds.yaml:/etc/openstack/clouds.yaml:z" \
        --volume "${AGLAIS_CODE}/experiments/zrq/terraform:/terraform:z" \
        atolmis/terraform-client \
        bash


# -----------------------------------------------------
# Set the cloud, credentials and cluster names.
#[user@kubectl-proxy]

    cloudname=gaia-prod
    clustername=Tiberius

# -----------------------------------------------------
# Get the cluster config for kubectl.
#[user@kubectl-proxy]

    mkdir -p "${HOME}/.kube/${clustername:?}"
    openstack \
        --os-cloud "${cloudname:?}-super" \
        coe cluster config \
            "${clustername:?}" \
            --force \
            --dir "${HOME}/.kube/${clustername:?}"

# -----------------------------------------------------
# Setup a port forwarding proxy.
#[user@kubectl-proxy]

    kubectl \
        --kubeconfig "${HOME}/.kube/${clustername:?}/config" \
        port-forward \
            --address 0.0.0.0 \
            svc/local-data-svc \
                8000

--START--
Forwarding from 0.0.0.0:8000 -> 80

Handling connection for 8000
Handling connection for 8000
Handling connection for 8000
Handling connection for 8000
....
....
--END--

    # I'm guessing the '80' is the port 80 on the target Pod that the Service points to.
    # Which implies a Service is an abstract thing that points to a port on a real Pod.

# -----------------------------------------------------
# -----------------------------------------------------
# Get the mapped portnumber.
#[user@desktop]

    baseport=$(
        podman inspect \
            kubectl-proxy \
        | jq -r '
            .[0]
          | .NetworkSettings.Ports[]
          | select(.containerPort == 8000)
          | .hostPort
          '
        )

    echo "Base port [${baseport}]"

# -----------------------------------------------------
# Get the data file.
#[user@desktop]

    curl --silent "http://localhost:$((baseport))/date.txt" | head

--START--
Wed Jul  1 15:20:11 UTC 2020
Wed Jul  1 15:20:12 UTC 2020
Wed Jul  1 15:20:13 UTC 2020
Wed Jul  1 15:20:14 UTC 2020
....
....
--END--


    curl --silent "http://localhost:$((baseport))/date.txt" | tail

--START--
....
....
Wed Jul  1 16:32:49 UTC 2020
Wed Jul  1 16:32:50 UTC 2020
Wed Jul  1 16:32:51 UTC 2020
--END--





