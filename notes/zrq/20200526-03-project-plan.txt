#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2020, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#


    Describe actions from the user's perspective.

# -----------------------------------------------------

    Aglais website - register and login

        Visit the home page and click the [give it a try] button.

            Unknown account created based generated identifier.

                New account added to DB linked to generated identifier.
                account type = anonymous

                Single use time limited login token saved in DB.
                301 redirect to Zeppelin site with login token in the URL.


        Visit the home page and click the [login/register] button.

            Login using OAuth providers
                [Google]
                [FaceBook]
                [GitHub]
                ....

                OAuth process ....
                Known account selected based on OAuth identifier.

                    Single use time limited login token saved in DB.
                    301 redirect to Zeppelin site with login token in the URL.

                Unknown account created based on OAuth identifier.

                    Intermediate pages ask for additional info ?

                    New account added to DB linked to OAuth identifier.
                    account type = basic

                    Single use time limited login token saved in DB.
                    301 redirect to Zeppelin site with login token in the URL.


            Login using email/password
                [email]
                [password]

                Known account selected based on email as identifier.

                    Single use time limited login token saved in DB.
                    301 redirect to Zeppelin site with login token in the URL.

                Unknown account created based on email as identifier.

                    New account added to DB linked to email and password.

                "Please check your email for a confirmation code."

                    Single use time limited confirmation code saved in DB.
                    Email contains link with confirmation code in the URL [http://example.com/confirmemail/#####].

                User gets the email and clicks on the [confirm] link.

                    GET request to the URL marks email as confirmed in DB and expires the confirmation code.
                    Single use time limited login token saved in DB.
                    301 redirect to Zeppelin site with login token in the URL.

        We have enough requirements to justify a separate project website, separate from the Zeppelin website.
        Placing this functionality in our own website should development easier.
        Trying to fit this functionality into the Zeppelin website means modifying it to fit with a 3rd party structure.
        If we decide to include Jupyter as well as Zeppelin, then we would have to re-write code embedded Zeppelin.
        If we decide to allow webservice access, then we would have to re-write code embedded Zeppelin.
        Single project website that handles user accounts, group membership, access permissions etc.


    Zeppelin website

        Zeppelin landing page extracts login token and converts it to user login.
        301 redirect to Zeppelin with session cookies set.

        Example notebooks available for experimenting.
        Select an example and run it.

        Example notebooks are read only
        Copy an example to create an editable version.
            User notebooks are editable and runnable.

        Create your own notebooks edit and run them.
            User notebooks are editable and runnable.

        Level-0 users have temporary notebook space.
        Level-0 users have temporary dataset space.


    Account registration micro-service

        Separate web service, used by the main website, also available via REST API.

        Guest/anon users are all connected to the same Spark instance ?
            Sounds simpler but in reality, probably not.
            Would need to limit any changes to the instance to prevent cross contamination.
            Would need to cleanup any changes to the instance when a user leaves.
            Lessons learned from covid - disposable PPE is easier

        Guest/anon users get their own Spark instance ?
            Disposable scalable deployments are easier to manage.
            No need to clean the instance, just destory it.
            Lessons learned from covid - disposable PPE is easier

        Guest/anon users get limited resources.
            Single Zeppelin instance.
            Single Spark master.
            Limits on
                * Zeppelin worker cores
                * Zeppelin worker memory
                * Spark worker cores
                * Spark worker memory
            K8s configuration may share VMs between guest accounts


        Level-0 Anonymous account :

            Notebooks  - max number and size
            Saved data - none
            /temp data - max number and size

            /temp data deleted on exit
            Notebooks deleted on exit

            Level-0 access is always available.
            Share compute resources with other level-0 users.
            Separate Docker containers and K8s pods sharing a single OpenStack Magnum cluster.

            Level-0 access is always transient.
                When the Zeppelin user logs out; everything gets deleted.
                When the Zeppelin session expires; everything gets deleted.


            (stretch goal)
            Warning on logout with level-0 account :
                "Your notebooks and data will be deleted"
                [OK][Cancel]

            (stretch goal)
            Option to register level-0 account from inside Zeppelin
                [Register] button


        Level-1 Basic user account :

            Notebooks  - max number and size
            Saved data - max number and size
            /temp data - max number and size

            /temp data deleted after - days
            Saved data deleted after - months
            Notebooks deleted after  - months

            Level-1 registered accounts get more resources.
            Share compute resources with other level-1 users.
            Separate Docker containers and K8s pods sharing one or more OpenStack Magnum cluster(s).

            Level-1 accounts can book extended compute resources


        Level-n custom user account :

            Account attributes set manually.

            Notebooks  - max number and size
            Saved data - max number and size
            /temp data - max number and size

            /temp data deleted after - days
            Notebooks not deleted
            By default saved data deleted after - months
            Option manually extend expiry dates on specific resources
                [Keep permanently] allocation

            Level-n accounts can book extended compute resources


    Resource booking micro-service

        Separate web service, used by the main website, also available via REST API.

        Level-1 accounts can book extended compute resources

        Register a booking for compute resources and resource sharing

            Resource packages

                Standard package sizes set limits for

                    * Zeppelin worker cores
                    * Zeppelin worker memory
                    * Spark worker cores
                    * Spark worker memory

                Tiny
                    Level-0 accounts get tiny package

                Small
                    Level-1 accounts get small package by default

                Medium
                Large
                    Level-1+ can reserve medium and large packages for specific periods of time

                Custom
                    Level-n+ can reserve custom instances for specific periods of time
                        * Zeppelin worker cores
                        * Zeppelin worker memory
                        * Spark worker cores
                        * Spark worker memory

            Sharing packages

                Shared
                    Level-0 accounts always share the same OpenStack resources
                    Level-1 accounts may be sharing some OpenStack resources

                Reserved
                    Level-1+ can reserve their own OpenStack resources for specific periods of time

                Custom (stretch)
                    Level-n+ can reserve custom resources for specific periods of time
                        * Specific platforms - Cumulus, RAL, Google, Azure ...
                        * Specific hardware - CPU, GPU, SSD ...


        Calendar based booking system

            Booking information calculated for a specific time period

                Timeline of physical resources (database/API)
                Timeline of reserved resources (database)

                    available = physical - reserved

                Timeline of available resources (calculated)

            Use cases :

                Availability based

                    What resources are available today ..
                    What resources are available tomorrow, next week, next month ..


                Select and book available packages in a block.

                    Book a small package for two days

                         large  --- --- --- --- --- === ===
                         medium === --- --- --- === === ===
                         small  === === ---[### ###]=== === <-- book this package
                         tiny   === === === === === === ===
                                Mon Tue Web Thu Fri Sat Sun

                    Book a medium package for three days

                         large  --- --- --- --- --- === ===
                         medium === --- --- ---[### ### ###] <-- book this package
                         small  === === --- === === === ===
                         tiny   === === === === === === ===
                                Mon Tue Web Thu Fri Sat Sun

                Display availability for a specific package


                Show availability for this week :

                     large  --- --- --- --- --- === ===
                     medium === --- --- --- === === ===
                     small  === === --- === === === ===
                     tiny   === === === === === === ===
                            Mon Tue Web Thu Fri Sat Sun


                Show availability for large and medium for this month :

                     large  --- --- --- --- --- === === === === === --- --- --- --- ...
                     medium === --- --- --- === === === === === === === === --- === ...
                            Mon Tue Web Thu Fri Sat Sun Mon Tue Web Thu Fri Sat Sun ...


                Show availability for a custom package for May-Jul 2020

                     custom ===== ----- ----- ----- ===== ===== ===== ===== ===== =====
                            May25 Jun01 Jun08 Jun15 Jun22 Jun29 Jul06 Jul13 Jul20 Jul27




            (stretch goal)
            Extend granularity to hourly.

            (stretch goal)
            Stretch goal to support interruptable processing, booking resources in multiple time spans.
            Use cases
                Booking large instances at multiple weekends
                Booking long running processing to run overnight for a week

            (stretch goal)
            Spare time
                Lower level accounts can run interruptable jobs in spare time.


            (stretch goal)
            Blazar integration

                StackHPC are planning to deploy OpenStack Blazar on Cumulus cloud a Cambridge.
                https://docs.openstack.org/blazar/latest/

                Work with StackHPC to integrate our booking service with OpenStack Blazar.
                Reservations are offered/booked based on available compute resources.
                Dynamic allocations on OpenStack ..


    Stretch goals


        Additional resources granted based on group membership.

            Group membership administered by group owners.
            Group membership managed by Grouper ?
            https://www.incommon.org/software/grouper/









