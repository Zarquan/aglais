#
# <meta:header>
#   <meta:licence>
#     Copyright (c) 2021, ROE (http://www.roe.ac.uk/)
#
#     This information is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     This information is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   </meta:licence>
# </meta:header>
#
#zrq-notes-time
#zrq-notes-indent
#zrq-notes-crypto
#zrq-notes-ansible
#zrq-notes-osformat
#zrq-notes-zeppelin
#

    Target:

        Follow on from previous tests.
        Compare 500,1000 ... trees

    Result:

        Work in progress ..


# -----------------------------------------------------
# -----------------------------------------------------
# Login to Zeppelin ...
#[user@desktop]

    firefox --new-window "http://zeppelin.metagrid.xyz:8080/" &


# -----------------------------------------------------
# -----------------------------------------------------

    Import notebooks from GitHub, clear the output and run all the cells ...

    Good astrometric solutions via ML Random Forrest classifier
    https://raw.githubusercontent.com/wfau/aglais-notebooks/main/2FRPC4BFS/note.json

# -----------------------------------------------------

    dev deployment #3

        test #3.6

            100% data, 500 trees, cache

            8:15 - run all
           13:30 - done

    #
    # Get the elapsed time.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/job/2FX82FMTH' \
    | jq '.body' \
    | sed '
        s/\("started":[[:space:]]*\)"\([[:alpha:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)[[:space:]]*\([[:digit:]]*:[[:digit:]]*:[[:digit:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)"/\1"\7 \3 \4 \5"/
        s/\("finished":[[:space:]]*\)"\([[:alpha:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)[[:space:]]*\([[:digit:]]*:[[:digit:]]*:[[:digit:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)"/\1"\7 \3 \4 \5"/
        /"started":/ {
            h
            s/\([[:space:]]*\)"started":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"finished":/ {
            H
            x
            s/[[:space:]]*"finished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsed\\": \\"$(datediff --format "%H:%M:%S" --input-format "%Y %b %d %H:%M:%S" \2)\\","/e
            x
            G
            }
        ' \
    | jq -r '.[] | select(.elapsed != null) | .elapsed'


    >   0:0:0
    >   0:0:55
    >   0:0:39
    >   0:3:55
    >   0:0:0
    >   0:8:2
    >   0:0:0
    >   1:18:44
    >   0:0:1
    >   0:20:20
    >   0:0:0
    >   1:4:36
    >   0:16:50
    >   0:33:29
    >   0:27:59
    >   0:27:39
    >   0:18:53
    >   0:16:43

    #
    # Manual annotation..
    #

    >   0:0:0
    >   0:0:55 - Astrometric features
    >   0:0:39 - Select sources
    >   0:3:55 - Hertzsprung-Russell diagram
    >   0:0:0
    >   0:8:2 - Selecting training data
    >   0:0:0
    >   1:18:44 - Random forest training
    >   0:0:1
    >   0:20:20 - Misclassification fraction
    >   0:0:0
    >   1:4:36  - Hertzsprung-Russell diagram
    >   0:16:50 - Classification probabilities
    >   0:33:29 - Good plot
    >   0:27:59 - Bad plot
    >   0:27:39 - Good/bad count
    >   0:18:53 - Error distribution
    >   0:16:43 - Null values


    dev deployment #3
        test #3.7

            modify the code to use cached data


                # cache it for speedy access below (all subsequent samples are derived from this):
            -   raw_sources_df.cache()
            +   cached_sources = raw_sources_df.cache()

                # register as SQL-queryable
            -   raw_sources_df.createOrReplaceTempView('raw_sources')
            +   cached_sources.createOrReplaceTempView('cached_sources')


            100% data, 500 trees, cache

    #
    # Get the elapsed time.
    #

    curl \
        --silent \
        --cookie '/tmp/cookies' \
        'http://128.232.227.222:8080/api/notebook/job/2FX82FMTH' \
    | jq '.body' \
    | sed '
        s/\("started":[[:space:]]*\)"\([[:alpha:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)[[:space:]]*\([[:digit:]]*:[[:digit:]]*:[[:digit:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)"/\1"\7 \3 \4 \5"/
        s/\("finished":[[:space:]]*\)"\([[:alpha:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)[[:space:]]*\([[:digit:]]*:[[:digit:]]*:[[:digit:]]*\)[[:space:]]*\([[:alpha:]]*\)[[:space:]]*\([[:digit:]]*\)"/\1"\7 \3 \4 \5"/
        /"started":/ {
            h
            s/\([[:space:]]*\)"started":[[:space:]]*\("[^"]*"\).*$/\1\2/
            x
            }
        /"finished":/ {
            H
            x
            s/[[:space:]]*"finished":[[:space:]]*\("[^"]*"\).*$/ \1/
            s/\([[:space:]]*\)\(.*\)/\1echo "\1\\"elapsed\\": \\"$(datediff --format "%H:%M:%S" --input-format "%Y %b %d %H:%M:%S" \2)\\","/e
            x
            G
            }
        ' \
    | jq -r '.[] | select(.elapsed != null) | .elapsed'

    >   0:0:0
    >   0:0:6   - Astrometric features
    >   0:11:20 - Select sources
    >   0:0:5   - Hertzsprung-Russell diagram
    >   0:0:0
    >   0:0:9   - Selecting training data
    >   0:0:0
    >   0:18:42 - Random forest training
    >   0:0:0
    >   0:0:29 - Misclassification fraction
    >   0:0:0
    >   0:1:49 - Hertzsprung-Russell diagram
    >   0:0:58 - Classification probabilities
    >   0:0:55 - Good plot
    >   0:0:54 - Bad plot
    >   0:0:56 - Good/bad count
    >   0:0:10 - Error distribution
    >   0:0:47 - Null values


    dev deployment #3
        test #3.8

            100% data, 1000 trees, cache

